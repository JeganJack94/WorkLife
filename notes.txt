// App.js
import React, { useState, useEffect } from 'react';
import Header from './pages/Header';
import CalendarView from './components/CalendarView';
import SettingsPage from './pages/SettingsPage';
import NotesPage from './pages/NotesPage';

const App = () => {
  const [activePage, setActivePage] = useState('home');
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Simulate initial data loading
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 1000);

    return () => clearTimeout(timer);
  }, []);

  if (isLoading) {
    return (
      <div className="min-h-screen bg-[#F3E5F5] flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-[#CE93D8] border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <h2 className="text-xl font-semibold text-gray-700">Loading WorkLife...</h2>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-[#F3E5F5]">
      <Header activePage={activePage} setActivePage={setActivePage} />
      
      <main className="container mx-auto py-6 px-4">
        <div className={`transition-all duration-300 ${
          activePage === 'home' ? 'opacity-100' : 'opacity-0 hidden'}`}>
          <CalendarView />
        </div>
        
        <div className={`transition-all duration-300 ${
          activePage === 'settings' ? 'opacity-100' : 'opacity-0 hidden'}`}>
          <SettingsPage />
        </div>
        
        <div className={`transition-all duration-300 ${
          activePage === 'notes' ? 'opacity-100' : 'opacity-0 hidden'}`}>
          <NotesPage />
        </div>
      </main>
    </div>
  );
};

export default App;

// CalendarView.js
import React, { useState, useEffect } from 'react';
import { format, startOfMonth, endOfMonth, eachDayOfInterval, getDay, addMonths, subMonths } from 'date-fns';
import { Briefcase, Thermometer, Home, X, ChevronLeft, ChevronRight, MoreHorizontal } from 'lucide-react';
import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip } from 'recharts';

const usePersistedState = (key, initialValue) => {
  const [state, setState] = useState(() => {
    try {
      const savedItem = localStorage.getItem(key);
      return savedItem ? JSON.parse(savedItem) : initialValue;
    } catch (error) {
      console.error('Error reading from localStorage:', error);
      return initialValue;
    }
  });

  useEffect(() => {
    const handleStorageChange = (event) => {
      console.log('Storage event detected:', event); // Debugging
      if (event.key === key) {
        try {
          const newValue = JSON.parse(event.newValue);
          console.log('New value from storage:', newValue); // Debugging
          setState(newValue);
        } catch (error) {
          console.error('Error parsing storage event:', error);
        }
      }
    };

    window.addEventListener('storage', handleStorageChange);
    return () => window.removeEventListener('storage', handleStorageChange);
  }, [key]);

  useEffect(() => {
    try {
      localStorage.setItem(key, JSON.stringify(state));
    } catch (error) {
      console.error('Error saving to localStorage:', error);
    }
  }, [key, state]);

  return [state, setState];
};

const CalendarView = () => {
  const [selectedDates, setSelectedDates] = usePersistedState('worklife-calendar', {});
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const [showSelector, setShowSelector] = useState(null);
  const [leaveSettings, setLeaveSettings] = usePersistedState('worklife-user-settings', {
    name: '',
    plannedBalance: 20,
    sickBalance: 10,
    profileImage: null
  });

  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    setIsMounted(true);
  }, []);

  useEffect(() => {
    const interval = setInterval(() => {
      try {
        const savedSettings = localStorage.getItem('worklife-user-settings');
        if (savedSettings) {
          const parsedSettings = JSON.parse(savedSettings);
          setLeaveSettings(parsedSettings);
        }
      } catch (error) {
        console.error('Error fetching settings from localStorage:', error);
      }
    }, 1000); // Check every second
  
    return () => clearInterval(interval);
  }, [setLeaveSettings]);
  
  const getLeaveStats = () => {
    const usedLeaves = Object.values(selectedDates).reduce((acc, type) => {
      acc[type] = (acc[type] || 0) + 1;
      return acc;
    }, {});

    return [
      {
        name: 'Planned Leave',
        value: Math.max(0, leaveSettings.plannedLeaveBalance - (usedLeaves.planned || 0)),
        color: '#3B82F6'
      },
      {
        name: 'Used Planned Leave',
        value: usedLeaves.planned || 0,
        color: '#93C5FD'
      },
      {
        name: 'Sick Leave',
        value: Math.max(0, leaveSettings.sickLeaveBalance - (usedLeaves.sick || 0)),
        color: '#EF4444'
      },
      {
        name: 'Used Sick Leave',
        value: usedLeaves.sick || 0,
        color: '#FCA5A5'
      }
    ];
  };

  const navigateMonth = (direction) => {
    setCurrentMonth(direction === 'next' ? addMonths(currentMonth, 1) : subMonths(currentMonth, 1));
  };

  const startDate = startOfMonth(currentMonth);
  const endDate = endOfMonth(currentMonth);
  const days = eachDayOfInterval({ start: startDate, end: endDate });
  const startingDayIndex = getDay(startDate);

  const toggleDate = (dateStr, type = null) => {
    setSelectedDates(prev => {
      const updatedDates = { ...prev };
      if (type === null || updatedDates[dateStr] === type) {
        delete updatedDates[dateStr];
      } else {
        updatedDates[dateStr] = type;
      }
      return updatedDates;
    });
    setShowSelector(null);
  };

  const DateSelector = ({ dateStr, onSelect, onClose }) => (
    <div className="absolute z-20 bg-white rounded-xl shadow-2xl border border-gray-200 
      w-56 p-3 transform -translate-x-1/2 left-1/2 
      transition-all duration-300 ease-in-out">
      <div className="flex justify-between items-center mb-3 pb-2 border-b">
        <span className="font-semibold text-gray-700 text-sm">{format(new Date(dateStr), 'dd MMM yyyy')}</span>
        <button 
          onClick={onClose} 
          className="text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-full p-1"
        >
          <X className="w-4 h-4" />
        </button>
      </div>
      <div className="space-y-2">
        {[
          { type: 'planned', label: 'Planned Leave', icon: Home, color: 'blue' },
          { type: 'sick', label: 'Sick Leave', icon: Thermometer, color: 'red' },
          { type: 'office', label: 'Work From Home', icon: Briefcase, color: 'green' }
        ].map(({ type, label, icon: Icon, color }) => (
          <button
            key={type}
            onClick={() => onSelect(dateStr, type)}
            className={`
              w-full flex items-center justify-between p-2 rounded-lg 
              hover:bg-${color}-50 text-left text-sm
              ${selectedDates[dateStr] === type ? `bg-${color}-100` : ''}
            `}
          >
            <div className="flex items-center space-x-2">
              <Icon className={`w-4 h-4 text-${color}-600`} />
              <span>{label}</span>
            </div>
            {selectedDates[dateStr] === type && <span className="text-xs text-gray-500">Selected</span>}
          </button>
        ))}
        <button
          onClick={() => onSelect(dateStr, null)}
          className="
            w-full flex items-center justify-between p-2 rounded-lg 
            hover:bg-gray-50 text-left text-sm
            text-gray-600 hover:text-gray-800
          "
        >
          <div className="flex items-center space-x-2">
            <MoreHorizontal className="w-4 h-4 text-gray-500" />
            <span>Clear Selection</span>
          </div>
        </button>
      </div>
    </div>
  );

  const getDateStyle = (type) => {
    const baseStyle = "h-full w-full rounded-lg flex flex-col items-center justify-center transition-all duration-200 cursor-pointer relative text-xs";
    switch(type) {
      case 'planned':
        return `${baseStyle} bg-blue-100 text-blue-800 hover:bg-blue-200`;
      case 'sick':
        return `${baseStyle} bg-red-100 text-red-800 hover:bg-red-200`;
      case 'office':
        return `${baseStyle} bg-green-100 text-green-800 hover:bg-green-200`;
      default:
        return `${baseStyle} bg-white hover:bg-gray-50`;
    }
  };

  return (
    <div className="container mx-auto px-4 sm:px-6 lg:px-8 space-y-6">
      <div className="bg-white rounded-xl shadow-lg p-4 sm:p-6">
        <h3 className="text-base sm:text-lg font-semibold mb-2 sm:mb-4">Leave Balance Overview</h3>
        <div className="flex flex-col sm:flex-row items-center">
          <div className="w-full sm:w-1/2" style={{ height: '300px' }}> {/* Fixed height */}
            {isMounted && (
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={getLeaveStats()}
                    innerRadius="60%"
                    outerRadius="80%"
                    paddingAngle={5}
                    dataKey="value"
                  >
                    {getLeaveStats().map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip
                    formatter={(value, name) => [`${value} days`, name]}
                    contentStyle={{
                      backgroundColor: 'white',
                      borderRadius: '8px',
                      border: 'none',
                      boxShadow: '0 2px 8px rgba(0,0,0,0.15)'
                    }}
                  />
                </PieChart>
              </ResponsiveContainer>
            )}
          </div>
          <div className="w-full sm:w-1/2 mt-4 sm:mt-0 sm:pl-4">
            <div className="grid grid-cols-2 gap-2 sm:gap-4">
              {getLeaveStats().map((entry, index) => (
                <div key={index} className="flex items-center space-x-2 bg-gray-50 p-2 rounded-lg">
                  <div className="w-3 h-3 rounded-full" style={{ backgroundColor: entry.color }} />
                  <div>
                    <span className="text-xs sm:text-sm text-gray-600 block">{entry.name}</span>
                    <span className="text-sm sm:text-base font-semibold">{entry.value} days</span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
 
      {/* Calendar Section */}
      <div className="bg-white rounded-xl shadow-lg p-4 sm:p-6">
        <div className="flex flex-col sm:flex-row items-center justify-between mb-4 sm:mb-6">
          <div className="flex items-center space-x-2 sm:space-x-4 mb-2 sm:mb-0">
            <button
              onClick={() => navigateMonth('prev')}
              className="p-1 sm:p-2 rounded-full hover:bg-gray-100 transition-colors"
            >
              <ChevronLeft className="w-4 h-4 sm:w-5 sm:h-5 text-gray-600" />
            </button>
            <h2 className="text-xl sm:text-2xl font-bold text-gray-800">
              {format(currentMonth, 'MMMM yyyy')}
            </h2>
            <button
              onClick={() => navigateMonth('next')}
              className="p-1 sm:p-2 rounded-full hover:bg-gray-100 transition-colors"
            >
              <ChevronRight className="w-4 h-4 sm:w-5 sm:h-5 text-gray-600" />
            </button>
          </div>
          <div className="flex space-x-2 sm:space-x-4">
            <LegendItem color="blue" label="PL" icon={<Home className="w-3 h-3 sm:w-4 sm:h-4" />} />
            <LegendItem color="red" label="SL" icon={<Thermometer className="w-3 h-3 sm:w-4 sm:h-4" />} />
            <LegendItem color="green" label="WFH" icon={<Briefcase className="w-3 h-3 sm:w-4 sm:h-4" />} />
          </div>
        </div>

        <div className="grid grid-cols-7 gap-1 sm:gap-4">
          {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
            <div key={day} className="text-center font-medium text-gray-500 text-xs sm:text-sm pb-1 sm:pb-2">
              {day}
            </div>
          ))}
          
          {Array.from({ length: startingDayIndex }).map((_, index) => (
            <div key={`empty-${index}`} className="aspect-square" />
          ))}
          
          {days.map(day => {
            const dateStr = format(day, 'yyyy-MM-dd');
            const isToday = format(new Date(), 'yyyy-MM-dd') === dateStr;
            const dateStyle = getDateStyle(selectedDates[dateStr]);
            
            return (
              <div key={dateStr} className="aspect-square p-0.5 sm:p-1 relative">
                <div
                  className={`${dateStyle} ${
                    isToday ? 'ring-2 ring-purple-400 ring-offset-2' : ''
                  }`}
                  onClick={() => setShowSelector(dateStr === showSelector ? null : dateStr)}
                >
                  <span className={`text-xs sm:text-sm font-medium ${
                    isToday ? 'text-purple-600' : ''
                  }`}>
                    {format(day, 'd')}
                  </span>
                  {selectedDates[dateStr] && (
                    <span className="text-[0.5rem] sm:text-xs mt-0.5">
                      {selectedDates[dateStr] === 'planned' && <Home className="w-2 h-2 sm:w-3 sm:h-3" />}
                      {selectedDates[dateStr] === 'sick' && <Thermometer className="w-2 h-2 sm:w-3 sm:h-3" />}
                      {selectedDates[dateStr] === 'office' && <Briefcase className="w-2 h-2 sm:w-3 sm:h-3" />}
                    </span>
                  )}
                </div>
                {showSelector === dateStr && (
                  <DateSelector 
                    dateStr={dateStr}
                    onSelect={toggleDate}
                    onClose={() => setShowSelector(null)}
                  />
                )}
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
};

const LegendItem = ({ color, label, icon }) => (
  <div className="flex items-center space-x-1 sm:space-x-2">
    <div className={`w-4 h-4 sm:w-6 sm:h-6 rounded-full flex items-center justify-center bg-${color}-100 border border-${color}-200`}>
      {icon}
    </div>
    <span className="text-xs sm:text-sm font-medium text-gray-600">{label}</span>
  </div>
);

export default CalendarView;

//NotesPage.js
import React, { useState, useEffect } from 'react';
import { PlusCircle, Trash2, Edit2, Save, X, Notebook } from 'lucide-react';

const NotesPage = () => {
  const [notes, setNotes] = useState([]);
  const [newNote, setNewNote] = useState('');
  const [editingId, setEditingId] = useState(null);
  const [editText, setEditText] = useState('');

  useEffect(() => {
    const savedNotes = localStorage.getItem('worklife-notes');
    if (savedNotes) {
      setNotes(JSON.parse(savedNotes));
    }
  }, []);

  useEffect(() => {
    localStorage.setItem('worklife-notes', JSON.stringify(notes));
  }, [notes]);

  const addNote = () => {
    if (newNote.trim()) {
      const newNoteObj = {
        id: Date.now(),
        text: newNote,
        date: new Date().toISOString(),
        color: getRandomColor()
      };
      setNotes(prev => [newNoteObj, ...prev]);
      setNewNote('');
    }
  };

  const deleteNote = (id) => {
    setNotes(prev => prev.filter(note => note.id !== id));
  };

  const startEditing = (note) => {
    setEditingId(note.id);
    setEditText(note.text);
  };

  const saveEdit = () => {
    if (editText.trim()) {
      setNotes(prev => prev.map(note => 
        note.id === editingId 
          ? { ...note, text: editText }
          : note
      ));
      setEditingId(null);
    }
  };

  const getRandomColor = () => {
    const colors = [
      { bg: 'bg-pink-50', border: 'border-pink-200', text: 'text-pink-800' },
      { bg: 'bg-purple-50', border: 'border-purple-200', text: 'text-purple-800' },
      { bg: 'bg-blue-50', border: 'border-blue-200', text: 'text-blue-800' },
      { bg: 'bg-green-50', border: 'border-green-200', text: 'text-green-800' },
      { bg: 'bg-yellow-50', border: 'border-yellow-200', text: 'text-yellow-800' }
    ];
    return colors[Math.floor(Math.random() * colors.length)];
  };

  return (
    <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-4">
      {/* Notes Input Section */}
      <div className="bg-white rounded-xl shadow-lg p-4 sm:p-6 mb-4 sm:mb-6">
        <div className="flex flex-col sm:flex-row items-center space-y-2 sm:space-y-0 sm:space-x-4">
          <div className="w-full">
            <input
              type="text"
              value={newNote}
              onChange={(e) => setNewNote(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && addNote()}
              placeholder="Add a new note..."
              className="w-full px-3 py-2 text-sm rounded-lg border border-gray-300 
                         focus:ring-2 focus:ring-purple-300 focus:border-transparent 
                         transition-all duration-200 outline-none"
            />
          </div>
          <button
            onClick={addNote}
            className="w-full sm:w-auto bg-gradient-to-r from-purple-400 to-purple-600 
                       text-white px-4 py-2 rounded-lg hover:opacity-90 
                       transition-opacity flex items-center justify-center space-x-2 text-sm"
          >
            <PlusCircle className="w-4 h-4 mr-2" />
            Add Note
          </button>
        </div>
      </div>

      {/* Empty State */}
      {notes.length === 0 && (
        <div className="text-center py-12 bg-white rounded-xl shadow-lg">
          <Notebook className="mx-auto w-16 h-16 text-purple-300 mb-4" />
          <p className="text-gray-500 text-sm">No notes yet. Start by adding a new note!</p>
        </div>
      )}

      {/* Notes Grid */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4">
        {notes.map(note => (
          <div
            key={note.id}
            className={`${note.color.bg} ${note.color.border} ${note.color.text} 
                        border rounded-xl p-3 sm:p-4 shadow-sm hover:shadow-md 
                        transition-shadow relative`}
          >
            {editingId === note.id ? (
              <div className="space-y-3">
                <textarea
                  value={editText}
                  onChange={(e) => setEditText(e.target.value)}
                  className="w-full p-2 text-sm rounded border border-gray-300 
                             focus:ring-2 focus:ring-purple-300 
                             focus:border-transparent resize-none"
                  rows="3"
                />
                <div className="flex justify-end space-x-2">
                  <button
                    onClick={() => setEditingId(null)}
                    className="p-1.5 rounded-lg hover:bg-gray-200 transition-colors"
                  >
                    <X className="w-4 h-4 text-gray-600" />
                  </button>
                  <button
                    onClick={saveEdit}
                    className="p-1.5 rounded-lg hover:bg-gray-200 transition-colors"
                  >
                    <Save className="w-4 h-4 text-green-600" />
                  </button>
                </div>
              </div>
            ) : (
              <>
                <div className="flex justify-between items-start mb-2">
                  <p className="text-sm whitespace-pre-wrap break-words pr-8">{note.text}</p>
                  <div className="absolute top-2 right-2 flex space-x-1">
                    <button
                      onClick={() => startEditing(note)}
                      className="p-1.5 rounded-lg hover:bg-white/50 transition-colors"
                    >
                      <Edit2 className="w-3.5 h-3.5 text-gray-600" />
                    </button>
                    <button
                      onClick={() => deleteNote(note.id)}
                      className="p-1.5 rounded-lg hover:bg-white/50 transition-colors"
                    >
                      <Trash2 className="w-3.5 h-3.5 text-red-600" />
                    </button>
                  </div>
                </div>
                <div className="text-xs text-gray-500 mt-2">
                  {new Date(note.date).toLocaleDateString('en-US', {
                    month: 'short',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                  })}
                </div>
              </>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default NotesPage;

//SettingsPage.js
import React, { useState, useEffect, useRef } from 'react';
import { User, Camera, Save, Check } from 'lucide-react';

const usePersistedState = (key, initialValue) => {
  const [state, setState] = useState(() => {
    try {
      const savedItem = localStorage.getItem(key);
      return savedItem ? JSON.parse(savedItem) : initialValue;
    } catch (error) {
      console.error('Error reading from localStorage:', error);
      return initialValue;
    }
  });

  useEffect(() => {
    try {
      localStorage.setItem(key, JSON.stringify(state));
    } catch (error) {
      console.error('Error saving to localStorage:', error);
    }
  }, [key, state]);

  return [state, setState];
};

const SettingsPage = () => {
  const [profile, setProfile] = usePersistedState('worklife-user-settings', {
    name: '',
    plannedBalance: 20,
    sickBalance: 10,
    profileImage: null
  });
  const [toast, setToast] = useState(null);
  const fileInputRef = useRef(null);

  const handleSave = () => {
    try {
      // Broadcast changes across tabs/windows
      window.dispatchEvent(new Event('storage'));

      setToast({
        message: 'Settings saved successfully!',
        type: 'success'
      });

      setTimeout(() => setToast(null), 2000);
    } catch (error) {
      console.error('Error saving profile:', error);
      setToast({
        message: 'Failed to save settings. Please try again.',
        type: 'error'
      });
    }
  };

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setProfile(prev => ({ ...prev, profileImage: reader.result }));
      };
      reader.readAsDataURL(file);
    }
  };

  return (
    <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-4 relative">
      {toast && (
        <div className={`fixed top-4 right-4 z-50 ${
          toast.type === 'success' 
            ? 'bg-green-500' 
            : 'bg-red-500'
        } text-white px-4 py-2 rounded-lg shadow-lg flex items-center space-x-2 
        transition-all duration-300 transform translate-x-0 opacity-100
        max-w-xs w-full`}>
          <Check className="w-5 h-5" />
          <span className="text-sm truncate">{toast.message}</span>
        </div>
      )}

      <div className="bg-white rounded-xl shadow-lg p-4 sm:p-6 space-y-6">
        <div className="flex flex-col items-center">
          <div className="relative">
            <div 
              className="w-28 h-28 sm:w-32 sm:h-32 rounded-full bg-gradient-to-r from-purple-400 to-purple-600 
                         flex items-center justify-center overflow-hidden"
            >
              {profile.profileImage ? (
                <img 
                  src={profile.profileImage} 
                  alt="Profile" 
                  className="w-full h-full object-cover"
                />
              ) : (
                <User className="w-16 h-16 text-white" />
              )}
            </div>
            <button 
              onClick={() => fileInputRef.current.click()}
              className="absolute bottom-0 right-0 w-8 h-8 sm:w-10 sm:h-10 
                         bg-white rounded-full shadow-lg flex items-center justify-center 
                         hover:bg-gray-50 transition-colors"
            >
              <Camera className="w-4 h-4 sm:w-5 sm:h-5 text-gray-600" />
            </button>
            <input 
              type="file" 
              ref={fileInputRef}
              accept="image/*"
              onChange={handleImageUpload}
              className="hidden" 
            />
          </div>
        </div>

        <div className="space-y-4 sm:space-y-6">
          <InputField
            label="Full Name"
            value={profile.name}
            onChange={(e) => setProfile(prev => ({ ...prev, name: e.target.value }))}
            placeholder="Enter your name"
          />

          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
            <InputField
              label="Planned Leave Balance"
              type="number"
              value={profile.plannedBalance}
              onChange={(e) => setProfile(prev => ({ 
                ...prev, 
                plannedBalance: parseInt(e.target.value) || 0 
              }))}
              min="0"
            />
            <InputField
              label="Sick Leave Balance"
              type="number"
              value={profile.sickBalance}
              onChange={(e) => setProfile(prev => ({ 
                ...prev, 
                sickBalance: parseInt(e.target.value) || 0 
              }))}
              min="0"
            />
          </div>
        </div>

        <button
          onClick={handleSave}
          className="w-full bg-gradient-to-r from-purple-400 to-purple-600 
                     text-white py-3 rounded-lg hover:opacity-90 
                     transition-opacity flex items-center justify-center 
                     space-x-2 font-medium shadow-lg text-sm sm:text-base"
        >
          <Save className="w-4 h-4 sm:w-5 sm:h-5" />
          <span>Save Changes</span>
        </button>
      </div>
    </div>
  );
};

const InputField = ({ label, ...props }) => (
  <div>
    <label className="block text-xs sm:text-sm font-medium text-gray-700 mb-2">{label}</label>
    <input
      {...props}
      className="w-full px-3 py-2 text-sm rounded-lg border border-gray-300 
                 focus:ring-2 focus:ring-purple-300 focus:border-transparent 
                 transition-all duration-200 outline-none"
    />
  </div>
);

export default SettingsPage;